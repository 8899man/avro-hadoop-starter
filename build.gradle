buildscript {
  repositories {
    mavenCentral()
    mavenRepo url: "http://clojars.org/repo"
  }
  dependencies {
    classpath 'com.eriwen:gradle-cobertura-plugin:1.1.0'
    classpath 'org.apache.maven:maven-artifact:2.2.1'
    classpath 'org.apache.avro:avro-compiler:1.7.4'
    classpath 'org.clojars.miguno:avro-gradle-plugin:1.7.2'
    // see https://github.com/musketyr/gradle-fatjar-plugin
    classpath 'eu.appsatori:gradle-fatjar-plugin:0.2-rc1'
  }
}

apply plugin: 'java'
apply plugin: 'cobertura'
apply plugin: 'application'
apply plugin: 'avro-gradle-plugin'
apply plugin: 'fatjar'
apply plugin: 'eclipse'
apply plugin: 'idea'

// group is the groupId
group = 'com.miguno.avro'
//the default artifactId is the project name, which is per default the directory name of the project
version = '0.1.0-SNAPSHOT'

description = """Example MapReduce jobs that read and/or write data in Avro format"""

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
  mavenCentral()
  // required to get ReportNG 1.1.3 (central Maven repo has only 1.1.2)
  mavenRepo url: "http://clojars.org/repo"
  // see http://www.cloudera.com/content/cloudera-content/cloudera-docs/CDH4/latest/CDH4-Installation-Guide/cdh4ig_topic_31.html
  mavenRepo url: "https://repository.cloudera.com/artifactory/cloudera-repos"
}

dependencies {
  compile group: 'log4j', name: 'log4j', version: '1.2.17'
  compile group: 'com.google.guava', name: 'guava', version: '14.0'
  compile group: 'com.beust', name: 'jcommander', version: '1.30'
  compile group: 'org.apache.avro', name: 'avro', version: '1.7.4'
  compile group: 'org.apache.avro', name: 'avro-mapred', version: '1.7.4', classifier: 'hadoop1'
  compile group: 'org.apache.hadoop', name: 'hadoop-common', version: '2.0.0-cdh4.3.0'
  compile group: 'org.apache.hadoop', name: 'hadoop-core', version: '2.0.0-mr1-cdh4.3.0'

  // Required to fix a Snappy native library error on OS X when trying to compress Avro files with Snappy;
  // Avro 1.7.4 uses the latest stable release of Snappy, 1.0.4.1 (see avro/lang/java/pom.xml) that still contains
  // the original bug described at https://github.com/xerial/snappy-java/issues/6.
  //
  // Note that in a production setting we do not care about OS X, so we could use Snappy 1.0.4.1 as required by
  // Avro 1.7.4 as is.
  //
  compile group: 'org.xerial.snappy', name: 'snappy-java', version: '1.1.0.1'

  testCompile group: 'org.apache.hadoop', name: 'hadoop-test', version: '2.0.0-mr1-cdh4.3.0'
  testCompile group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: '2.0.0-mr1-cdh4.3.0'
  testCompile group: 'org.apache.hadoop', name: 'hadoop-hdfs', version: '2.0.0-cdh4.3.0'
  // Workaround for a known bug in commons-daemon 1.0.3, which is a transitive dependency of hadoop-hdfs
  testCompile("commons-daemon:commons-daemon:1.0.5") {
    // Force version 1.0.5 because of a known bug in the 1.0.3 pom file that results in the following build error:
    //
    //    Could not resolve commons-daemon:commons-daemon:1.0.3: inconsistent module descriptor file found in: [...]
    //        bad organisation: expected='commons-daemon' found='org.apache.commons'
    //
    force = true
  }
  testCompile group: 'org.testng', name: 'testng', version: '6.8'
  testCompile group: 'org.uncommons', name: 'reportng', version: '1.1.3'
  testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.0'
  testCompile group: 'org.easytesting', name: 'fest-assert-core', version: '2.0M8'
  testCompile group: 'junit', name: 'junit', version: '4.11'
  // workaround for a known issue with TestNG 6.x: explicitly add Guice (Gradle will fail to run tests otherwise)
  testCompile group: 'com.google.inject', name: 'guice', version: '3.0'

  compileAvro
}

compileAvro {
  source = 'src/main/resources/avro'
  destinationDir = file("generated-sources/avro")
}

sourceSets {
  main {
    java {
      srcDir compileAvro.destinationDir
    }

    // ensure that resources (src/main/resources) and Avro resource files are added to CLASSPATH
    runtimeClasspath = files(output.resourcesDir) + files(compileAvro.source) + runtimeClasspath
  }
  test {
    // ensure that test resources (src/test/resources) are added to CLASSPATH;
    // see http://forums.gradle.org/gradle/topics/tests_arent_executed_when_setting_the_test_runtimeclasspath and
    // http://gradle.org/docs/current/dsl/org.gradle.api.tasks.testing.Test.html#org.gradle.api.tasks.testing.Test:classpath
    runtimeClasspath = files(output.resourcesDir) + runtimeClasspath
  }
}

task testng(type: Test) {
  useTestNG() {
    suiteXmlBuilder().suite(name: 'avro-hadoop-starter', parallel: 'tests') {
      test (name : 'all-tests') {
        packages {
          'package' (name: 'com.miguno.*')
        }
      }
    }
  }
  options {
    listeners << 'org.uncommons.reportng.HTMLReporter'
    listeners << 'org.uncommons.reportng.JUnitXMLReporter'
  }
  ext.useDefaultListeners = true
  ext.workingDirectory = 'build/'
}

test {
  // Disable JDK 7's new bytecode verifier which requires the need for stack frames.  This is required when running
  // this code via JDK 7.  Otherwise our unit tests will fail because of
  // "java.lang.VerifyError: Expecting a stackmap frame at branch target [...]"
  //
  // See also:
  // http://chrononsystems.com/blog/java-7-design-flaw-leads-to-huge-backward-step-for-the-jvm
  // http://stackoverflow.com/questions/8958267/java-lang-verifyerror-expecting-a-stackmap-frame
  //
  jvmArgs "-XX:-UseSplitVerifier"
}

// https://github.com/eriwen/gradle-cobertura-plugin
cobertura {
  format = 'xml'
  includes = ['**/*.java']
}

mainClassName = "com.miguno.avro.hadoop.TweetCountTest"
